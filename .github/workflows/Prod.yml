name: Full Production CI/CD

on:
  push:
    branches: [ prod ]

env:
  DOCKER_REPO: zoheb/githubactions
  TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK_URL }}

jobs:
  # ---------- CI STAGE ----------
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: |
          echo "üß™ Running tests..."
          npm test || { echo "‚ùå Tests failed. Exiting pipeline."; exit 1; }

      - name: Generate Docker image tag
        id: tag
        run: |
          REPO=$(basename $GITHUB_REPOSITORY)
          BRANCH=${GITHUB_REF##*/}
          COMMIT_ID=$(echo $GITHUB_SHA | cut -c1-7)
          TAG="${REPO}-${BRANCH}-${COMMIT_ID}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "‚úÖ Image Tag: $TAG"

      - name: Build Docker image
        run: |
          echo "üèóÔ∏è Building Docker image..."
          docker build -t $DOCKER_REPO:${{ steps.tag.outputs.tag }} .
          if [ $? -ne 0 ]; then
            echo "‚ùå Docker build failed! Exiting."
            exit 1
          fi

      - name: Push Docker image
        run: |
          echo "üì¶ Pushing Docker image..."
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push $DOCKER_REPO:${{ steps.tag.outputs.tag }}
          echo "‚úÖ Image pushed successfully"

  # ---------- MANUAL APPROVAL STAGE ----------
  approve-for-deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment:
      name: production
      url: https://your-prod-env.example.com
    steps:
      - name: Await manual approval
        run: |
          echo "üü° Waiting for approval to deploy..."
          echo "‚úÖ Approved for production deployment!"

  # ---------- CD STAGE ----------
  deploy:
    runs-on: ubuntu-latest
    needs: approve-for-deploy
    if: ${{ needs.build-and-test.result == 'success' }}
    steps:
      - name: Deploy to Production
        run: |
          echo "üöÄ Starting deployment..."
          # Simulate multiple environment deployments with a for loop
          for ENV in "frontend" "backend" "database"; do
            echo "üîß Deploying $ENV service..."
            sleep 2
            echo "$ENV deployed successfully!"
          done

          echo "‚úÖ Deployment completed successfully!"

      - name: Notify Teams
        if: success()
        run: |
          MESSAGE="üöÄ Deployment Successful! \nApp: ${{ github.repository }} \nEnvironment: Production \nCommit: ${{ github.sha }}"
          PAYLOAD="{\"text\": \"$MESSAGE\"}"
          curl -H "Content-Type: application/json" -d "$PAYLOAD" $TEAMS_WEBHOOK
          echo "üì¢ Teams notified!"
